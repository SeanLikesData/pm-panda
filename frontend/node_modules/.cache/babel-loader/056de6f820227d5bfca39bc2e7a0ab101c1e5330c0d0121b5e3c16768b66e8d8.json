{"ast":null,"code":"var _jsxFileName = \"/Volumes/t9/github/pmhelper/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport styled from '@emotion/styled';\nimport { Toaster } from 'react-hot-toast';\nimport DocumentsPane from './components/DocumentsPane';\nimport ChatPane from './components/ChatPane';\nimport PRDEditor from './components/PRDEditor';\nimport { useStore } from './store/appStore';\nimport { ollamaService } from './services/ollamaService';\nimport { apiService } from './services/apiService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AppContainer = styled.div`\n  display: flex;\n  height: 100vh;\n  background: #f5f5f5;\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;\n`;\n_c = AppContainer;\nconst LeftPane = styled.div`\n  width: 300px;\n  background: white;\n  border-right: 1px solid #e0e0e0;\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n`;\n_c2 = LeftPane;\nconst MiddlePane = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  background: white;\n  border-right: 1px solid #e0e0e0;\n  min-width: 400px;\n`;\n_c3 = MiddlePane;\nconst RightPane = styled.div`\n  width: 45%;\n  background: white;\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n`;\n_c4 = RightPane;\nconst Header = styled.header`\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n  color: white;\n  padding: 1rem;\n  text-align: center;\n  box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n`;\n_c5 = Header;\nconst Title = styled.h1`\n  margin: 0;\n  font-size: 1.5rem;\n  font-weight: 600;\n`;\n_c6 = Title;\nconst Subtitle = styled.p`\n  margin: 0.25rem 0 0 0;\n  opacity: 0.9;\n  font-size: 0.9rem;\n`;\n_c7 = Subtitle;\nfunction App() {\n  _s();\n  const {\n    currentPRD,\n    setCurrentPRD,\n    documents,\n    addDocument,\n    messages,\n    addMessage\n  } = useStore();\n  const [isOllamaConnected, setIsOllamaConnected] = useState(false);\n  useEffect(() => {\n    // Initialize with a PRD template\n    initializePRD();\n    // Check Ollama connection\n    checkOllamaConnection();\n  }, []);\n  const initializePRD = async () => {\n    try {\n      const template = await apiService.getPRDTemplate('basic');\n      setCurrentPRD({\n        ...template,\n        title: 'New Product Requirements Document',\n        sections: {\n          ...template.sections,\n          overview: {\n            ...template.sections.overview,\n            content: 'This PRD outlines the requirements for our new product feature...'\n          }\n        }\n      });\n    } catch (error) {\n      // Use default template if API fails\n      setCurrentPRD(getDefaultPRDTemplate());\n    }\n  };\n  const checkOllamaConnection = async () => {\n    const connected = await ollamaService.checkConnection();\n    setIsOllamaConnected(connected);\n  };\n  const getDefaultPRDTemplate = () => ({\n    title: 'Product Requirements Document',\n    sections: {\n      overview: {\n        title: 'Product Overview',\n        content: '',\n        required: true,\n        prompts: ['What problem does this product solve?', 'Who is the target audience?', 'What is the product vision?', 'What is the value proposition?']\n      },\n      goals: {\n        title: 'Goals & Success Metrics',\n        content: '',\n        required: true,\n        prompts: ['What are the primary goals?', 'How will we measure success?', 'What are the KPIs?', 'What is the target adoption rate?']\n      },\n      businessObjectives: {\n        title: 'Business Objectives',\n        content: '',\n        required: true,\n        prompts: ['How does this align with business goals?', 'What is the expected ROI?', 'What is the revenue impact?', 'What are the cost implications?']\n      },\n      strategicFit: {\n        title: 'Strategic Fit',\n        content: '',\n        required: true,\n        prompts: ['How does this fit into our product strategy?', 'What are the competitive advantages?', 'How does this differentiate us?', 'What market opportunity does this address?']\n      },\n      userStories: {\n        title: 'User Stories',\n        content: '',\n        required: true,\n        template: 'As a [user type], I want to [action] so that [benefit]',\n        prompts: ['List key user personas', 'Define user journey maps', 'What are the main user scenarios?', 'What are the edge cases?']\n      },\n      userDesign: {\n        title: 'User Design & Interactions',\n        content: '',\n        required: true,\n        prompts: ['What are the key user flows?', 'What are the UI/UX requirements?', 'What are the accessibility requirements?', 'What are the mobile/responsive requirements?']\n      },\n      scope: {\n        title: 'Scope & Boundaries',\n        content: '',\n        required: true,\n        prompts: ['What is in scope for MVP?', 'What is out of scope?', 'What are the dependencies?', 'What are the constraints?']\n      },\n      questionsAndClarifications: {\n        title: 'Open Questions & Clarifications',\n        content: '',\n        required: false,\n        prompts: ['What needs stakeholder input?', 'What technical questions remain?', 'What assumptions are we making?', 'What risks need mitigation?']\n      },\n      requirements: {\n        title: 'Functional Requirements',\n        content: '',\n        required: true,\n        prompts: ['List must-have features', 'List nice-to-have features', 'Define acceptance criteria', 'What are the performance requirements?']\n      },\n      technicalSpecs: {\n        title: 'Technical Specifications',\n        content: '',\n        required: false,\n        prompts: ['What are the API requirements?', 'What are the data model requirements?', 'What are the integration points?', 'What are the security requirements?']\n      },\n      timeline: {\n        title: 'Timeline & Milestones',\n        content: '',\n        required: true,\n        prompts: ['What is the target launch date?', 'What are the key milestones?', 'What are the sprint goals?', 'What are the dependencies on timeline?']\n      }\n    },\n    missingRequired: [] // Track missing required sections\n  });\n  const handleSendMessage = async message => {\n    // Add user message\n    addMessage({\n      role: 'user',\n      content: message\n    });\n\n    // Get AI response\n    const contextDocs = documents.map(d => d.content).join('\\n\\n');\n    const prdContext = JSON.stringify(currentPRD);\n    const prompt = `\n      You are a Product Manager assistant helping to create a PRD.\n      \n      Current PRD Context:\n      ${prdContext}\n      \n      Document Context:\n      ${contextDocs}\n      \n      User Question: ${message}\n      \n      Please provide helpful suggestions for improving the PRD.\n    `;\n    try {\n      const response = await ollamaService.chat(prompt);\n      addMessage({\n        role: 'assistant',\n        content: response\n      });\n\n      // Parse any PRD updates from the response\n      if (response.includes('[PRD_UPDATE]')) {\n        const updateMatch = response.match(/\\[PRD_UPDATE\\](.*?)\\[\\/PRD_UPDATE\\]/s);\n        if (updateMatch) {\n          try {\n            const updates = JSON.parse(updateMatch[1]);\n            setCurrentPRD(prev => ({\n              ...prev,\n              ...updates\n            }));\n          } catch (e) {\n            console.error('Failed to parse PRD update:', e);\n          }\n        }\n      }\n    } catch (error) {\n      addMessage({\n        role: 'assistant',\n        content: `Error: ${error.message}. Make sure Ollama is running locally.`\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(AppContainer, {\n    children: [/*#__PURE__*/_jsxDEV(Toaster, {\n      position: \"top-right\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(LeftPane, {\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        children: [/*#__PURE__*/_jsxDEV(Title, {\n          children: \"\\uD83D\\uDCC4 Documents\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Subtitle, {\n          children: \"Context for PRD\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DocumentsPane, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MiddlePane, {\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        children: [/*#__PURE__*/_jsxDEV(Title, {\n          children: \"\\uD83D\\uDCAC AI Assistant\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Subtitle, {\n          children: isOllamaConnected ? 'Connected to Ollama' : 'Ollama not connected'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 298,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ChatPane, {\n        onSendMessage: handleSendMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(RightPane, {\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        children: [/*#__PURE__*/_jsxDEV(Title, {\n          children: \"\\uD83D\\uDCDD PRD Editor\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Subtitle, {\n          children: \"Product Requirements Document\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 308,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(PRDEditor, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 284,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"wU4L5Q5A/aOw5dWf/V8A/97ny/g=\", false, function () {\n  return [useStore];\n});\n_c8 = App;\nexport default App;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8;\n$RefreshReg$(_c, \"AppContainer\");\n$RefreshReg$(_c2, \"LeftPane\");\n$RefreshReg$(_c3, \"MiddlePane\");\n$RefreshReg$(_c4, \"RightPane\");\n$RefreshReg$(_c5, \"Header\");\n$RefreshReg$(_c6, \"Title\");\n$RefreshReg$(_c7, \"Subtitle\");\n$RefreshReg$(_c8, \"App\");","map":{"version":3,"names":["React","useState","useEffect","styled","Toaster","DocumentsPane","ChatPane","PRDEditor","useStore","ollamaService","apiService","jsxDEV","_jsxDEV","AppContainer","div","_c","LeftPane","_c2","MiddlePane","_c3","RightPane","_c4","Header","header","_c5","Title","h1","_c6","Subtitle","p","_c7","App","_s","currentPRD","setCurrentPRD","documents","addDocument","messages","addMessage","isOllamaConnected","setIsOllamaConnected","initializePRD","checkOllamaConnection","template","getPRDTemplate","title","sections","overview","content","error","getDefaultPRDTemplate","connected","checkConnection","required","prompts","goals","businessObjectives","strategicFit","userStories","userDesign","scope","questionsAndClarifications","requirements","technicalSpecs","timeline","missingRequired","handleSendMessage","message","role","contextDocs","map","d","join","prdContext","JSON","stringify","prompt","response","chat","includes","updateMatch","match","updates","parse","prev","e","console","children","position","fileName","_jsxFileName","lineNumber","columnNumber","onSendMessage","_c8","$RefreshReg$"],"sources":["/Volumes/t9/github/pmhelper/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport styled from '@emotion/styled';\nimport { Toaster } from 'react-hot-toast';\nimport DocumentsPane from './components/DocumentsPane';\nimport ChatPane from './components/ChatPane';\nimport PRDEditor from './components/PRDEditor';\nimport { useStore } from './store/appStore';\nimport { ollamaService } from './services/ollamaService';\nimport { apiService } from './services/apiService';\n\nconst AppContainer = styled.div`\n  display: flex;\n  height: 100vh;\n  background: #f5f5f5;\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;\n`;\n\nconst LeftPane = styled.div`\n  width: 300px;\n  background: white;\n  border-right: 1px solid #e0e0e0;\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n`;\n\nconst MiddlePane = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  background: white;\n  border-right: 1px solid #e0e0e0;\n  min-width: 400px;\n`;\n\nconst RightPane = styled.div`\n  width: 45%;\n  background: white;\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n`;\n\nconst Header = styled.header`\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n  color: white;\n  padding: 1rem;\n  text-align: center;\n  box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n`;\n\nconst Title = styled.h1`\n  margin: 0;\n  font-size: 1.5rem;\n  font-weight: 600;\n`;\n\nconst Subtitle = styled.p`\n  margin: 0.25rem 0 0 0;\n  opacity: 0.9;\n  font-size: 0.9rem;\n`;\n\nfunction App() {\n  const { \n    currentPRD, \n    setCurrentPRD, \n    documents,\n    addDocument,\n    messages,\n    addMessage \n  } = useStore();\n\n  const [isOllamaConnected, setIsOllamaConnected] = useState(false);\n\n  useEffect(() => {\n    // Initialize with a PRD template\n    initializePRD();\n    // Check Ollama connection\n    checkOllamaConnection();\n  }, []);\n\n  const initializePRD = async () => {\n    try {\n      const template = await apiService.getPRDTemplate('basic');\n      setCurrentPRD({\n        ...template,\n        title: 'New Product Requirements Document',\n        sections: {\n          ...template.sections,\n          overview: {\n            ...template.sections.overview,\n            content: 'This PRD outlines the requirements for our new product feature...'\n          }\n        }\n      });\n    } catch (error) {\n      // Use default template if API fails\n      setCurrentPRD(getDefaultPRDTemplate());\n    }\n  };\n\n  const checkOllamaConnection = async () => {\n    const connected = await ollamaService.checkConnection();\n    setIsOllamaConnected(connected);\n  };\n\n  const getDefaultPRDTemplate = () => ({\n    title: 'Product Requirements Document',\n    sections: {\n      overview: {\n        title: 'Product Overview',\n        content: '',\n        required: true,\n        prompts: [\n          'What problem does this product solve?',\n          'Who is the target audience?',\n          'What is the product vision?',\n          'What is the value proposition?'\n        ]\n      },\n      goals: {\n        title: 'Goals & Success Metrics',\n        content: '',\n        required: true,\n        prompts: [\n          'What are the primary goals?',\n          'How will we measure success?',\n          'What are the KPIs?',\n          'What is the target adoption rate?'\n        ]\n      },\n      businessObjectives: {\n        title: 'Business Objectives',\n        content: '',\n        required: true,\n        prompts: [\n          'How does this align with business goals?',\n          'What is the expected ROI?',\n          'What is the revenue impact?',\n          'What are the cost implications?'\n        ]\n      },\n      strategicFit: {\n        title: 'Strategic Fit',\n        content: '',\n        required: true,\n        prompts: [\n          'How does this fit into our product strategy?',\n          'What are the competitive advantages?',\n          'How does this differentiate us?',\n          'What market opportunity does this address?'\n        ]\n      },\n      userStories: {\n        title: 'User Stories',\n        content: '',\n        required: true,\n        template: 'As a [user type], I want to [action] so that [benefit]',\n        prompts: [\n          'List key user personas',\n          'Define user journey maps',\n          'What are the main user scenarios?',\n          'What are the edge cases?'\n        ]\n      },\n      userDesign: {\n        title: 'User Design & Interactions',\n        content: '',\n        required: true,\n        prompts: [\n          'What are the key user flows?',\n          'What are the UI/UX requirements?',\n          'What are the accessibility requirements?',\n          'What are the mobile/responsive requirements?'\n        ]\n      },\n      scope: {\n        title: 'Scope & Boundaries',\n        content: '',\n        required: true,\n        prompts: [\n          'What is in scope for MVP?',\n          'What is out of scope?',\n          'What are the dependencies?',\n          'What are the constraints?'\n        ]\n      },\n      questionsAndClarifications: {\n        title: 'Open Questions & Clarifications',\n        content: '',\n        required: false,\n        prompts: [\n          'What needs stakeholder input?',\n          'What technical questions remain?',\n          'What assumptions are we making?',\n          'What risks need mitigation?'\n        ]\n      },\n      requirements: {\n        title: 'Functional Requirements',\n        content: '',\n        required: true,\n        prompts: [\n          'List must-have features',\n          'List nice-to-have features',\n          'Define acceptance criteria',\n          'What are the performance requirements?'\n        ]\n      },\n      technicalSpecs: {\n        title: 'Technical Specifications',\n        content: '',\n        required: false,\n        prompts: [\n          'What are the API requirements?',\n          'What are the data model requirements?',\n          'What are the integration points?',\n          'What are the security requirements?'\n        ]\n      },\n      timeline: {\n        title: 'Timeline & Milestones',\n        content: '',\n        required: true,\n        prompts: [\n          'What is the target launch date?',\n          'What are the key milestones?',\n          'What are the sprint goals?',\n          'What are the dependencies on timeline?'\n        ]\n      }\n    },\n    missingRequired: []  // Track missing required sections\n  });\n\n  const handleSendMessage = async (message) => {\n    // Add user message\n    addMessage({ role: 'user', content: message });\n\n    // Get AI response\n    const contextDocs = documents.map(d => d.content).join('\\n\\n');\n    const prdContext = JSON.stringify(currentPRD);\n    \n    const prompt = `\n      You are a Product Manager assistant helping to create a PRD.\n      \n      Current PRD Context:\n      ${prdContext}\n      \n      Document Context:\n      ${contextDocs}\n      \n      User Question: ${message}\n      \n      Please provide helpful suggestions for improving the PRD.\n    `;\n\n    try {\n      const response = await ollamaService.chat(prompt);\n      addMessage({ role: 'assistant', content: response });\n      \n      // Parse any PRD updates from the response\n      if (response.includes('[PRD_UPDATE]')) {\n        const updateMatch = response.match(/\\[PRD_UPDATE\\](.*?)\\[\\/PRD_UPDATE\\]/s);\n        if (updateMatch) {\n          try {\n            const updates = JSON.parse(updateMatch[1]);\n            setCurrentPRD(prev => ({ ...prev, ...updates }));\n          } catch (e) {\n            console.error('Failed to parse PRD update:', e);\n          }\n        }\n      }\n    } catch (error) {\n      addMessage({ \n        role: 'assistant', \n        content: `Error: ${error.message}. Make sure Ollama is running locally.` \n      });\n    }\n  };\n\n  return (\n    <AppContainer>\n      <Toaster position=\"top-right\" />\n      \n      <LeftPane>\n        <Header>\n          <Title>📄 Documents</Title>\n          <Subtitle>Context for PRD</Subtitle>\n        </Header>\n        <DocumentsPane />\n      </LeftPane>\n\n      <MiddlePane>\n        <Header>\n          <Title>💬 AI Assistant</Title>\n          <Subtitle>\n            {isOllamaConnected ? 'Connected to Ollama' : 'Ollama not connected'}\n          </Subtitle>\n        </Header>\n        <ChatPane onSendMessage={handleSendMessage} />\n      </MiddlePane>\n\n      <RightPane>\n        <Header>\n          <Title>📝 PRD Editor</Title>\n          <Subtitle>Product Requirements Document</Subtitle>\n        </Header>\n        <PRDEditor />\n      </RightPane>\n    </AppContainer>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}