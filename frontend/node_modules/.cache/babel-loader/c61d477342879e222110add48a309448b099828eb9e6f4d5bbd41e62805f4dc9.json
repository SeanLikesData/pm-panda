{"ast":null,"code":"import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\nexport const useStore = create(persist((set, get) => ({\n  // Projects management\n  projects: [],\n  currentProject: null,\n  addProject: project => set(state => ({\n    projects: [...state.projects, {\n      id: Date.now(),\n      ...project,\n      createdAt: new Date().toISOString(),\n      lastModified: new Date().toISOString()\n    }]\n  })),\n  updateProject: (projectId, updates) => set(state => ({\n    projects: state.projects.map(p => p.id === projectId ? {\n      ...p,\n      ...updates,\n      lastModified: new Date().toISOString()\n    } : p)\n  })),\n  deleteProject: projectId => set(state => {\n    var _state$currentProject;\n    return {\n      projects: state.projects.filter(p => p.id !== projectId),\n      currentProject: ((_state$currentProject = state.currentProject) === null || _state$currentProject === void 0 ? void 0 : _state$currentProject.id) === projectId ? null : state.currentProject\n    };\n  }),\n  setCurrentProject: project => set({\n    currentProject: project\n  }),\n  // Documents for context\n  documents: [],\n  addDocument: doc => set(state => ({\n    documents: [...state.documents, {\n      id: Date.now(),\n      ...doc,\n      addedAt: new Date().toISOString()\n    }]\n  })),\n  removeDocument: id => set(state => ({\n    documents: state.documents.filter(d => d.id !== id)\n  })),\n  clearDocuments: () => set({\n    documents: []\n  }),\n  // Chat messages\n  messages: [],\n  addMessage: message => set(state => ({\n    messages: [...state.messages, {\n      id: Date.now(),\n      timestamp: new Date().toISOString(),\n      ...message\n    }]\n  })),\n  clearMessages: () => set({\n    messages: []\n  }),\n  // Current PRD being edited\n  currentPRD: null,\n  setCurrentPRD: prd => set({\n    currentPRD: prd\n  }),\n  updatePRDSection: (sectionKey, content) => set(state => ({\n    currentPRD: {\n      ...state.currentPRD,\n      sections: {\n        ...state.currentPRD.sections,\n        [sectionKey]: {\n          ...state.currentPRD.sections[sectionKey],\n          content\n        }\n      }\n    }\n  })),\n  savePRDToProject: () => {\n    const state = get();\n    if (state.currentProject && state.currentPRD) {\n      state.updateProject(state.currentProject.id, {\n        prd: state.currentPRD,\n        status: 'active'\n      });\n    }\n  },\n  // UI state\n  activeView: 'projects',\n  setActiveView: view => set({\n    activeView: view\n  }),\n  activeSection: 'overview',\n  setActiveSection: section => set({\n    activeSection: section\n  }),\n  isLoading: false,\n  setIsLoading: loading => set({\n    isLoading: loading\n  })\n}), {\n  name: 'pmhelper-storage',\n  partialize: state => ({\n    projects: state.projects,\n    currentProject: state.currentProject\n  })\n}));","map":{"version":3,"names":["create","persist","useStore","set","get","projects","currentProject","addProject","project","state","id","Date","now","createdAt","toISOString","lastModified","updateProject","projectId","updates","map","p","deleteProject","_state$currentProject","filter","setCurrentProject","documents","addDocument","doc","addedAt","removeDocument","d","clearDocuments","messages","addMessage","message","timestamp","clearMessages","currentPRD","setCurrentPRD","prd","updatePRDSection","sectionKey","content","sections","savePRDToProject","status","activeView","setActiveView","view","activeSection","setActiveSection","section","isLoading","setIsLoading","loading","name","partialize"],"sources":["/Volumes/t9/github/pmhelper/frontend/src/store/appStore.js"],"sourcesContent":["import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\n\nexport const useStore = create(\n  persist(\n    (set, get) => ({\n      // Projects management\n      projects: [],\n      currentProject: null,\n      addProject: (project) => set((state) => ({\n        projects: [...state.projects, { \n          id: Date.now(), \n          ...project,\n          createdAt: new Date().toISOString(),\n          lastModified: new Date().toISOString()\n        }]\n      })),\n      updateProject: (projectId, updates) => set((state) => ({\n        projects: state.projects.map(p => \n          p.id === projectId \n            ? { ...p, ...updates, lastModified: new Date().toISOString() }\n            : p\n        )\n      })),\n      deleteProject: (projectId) => set((state) => ({\n        projects: state.projects.filter(p => p.id !== projectId),\n        currentProject: state.currentProject?.id === projectId ? null : state.currentProject\n      })),\n      setCurrentProject: (project) => set({ currentProject: project }),\n\n      // Documents for context\n      documents: [],\n      addDocument: (doc) => set((state) => ({\n        documents: [...state.documents, { \n          id: Date.now(), \n          ...doc,\n          addedAt: new Date().toISOString()\n        }]\n      })),\n      removeDocument: (id) => set((state) => ({\n        documents: state.documents.filter(d => d.id !== id)\n      })),\n      clearDocuments: () => set({ documents: [] }),\n\n      // Chat messages\n      messages: [],\n      addMessage: (message) => set((state) => ({\n        messages: [...state.messages, {\n          id: Date.now(),\n          timestamp: new Date().toISOString(),\n          ...message\n        }]\n      })),\n      clearMessages: () => set({ messages: [] }),\n\n      // Current PRD being edited\n      currentPRD: null,\n      setCurrentPRD: (prd) => set({ currentPRD: prd }),\n      updatePRDSection: (sectionKey, content) => set((state) => ({\n        currentPRD: {\n          ...state.currentPRD,\n          sections: {\n            ...state.currentPRD.sections,\n            [sectionKey]: {\n              ...state.currentPRD.sections[sectionKey],\n              content\n            }\n          }\n        }\n      })),\n      savePRDToProject: () => {\n        const state = get();\n        if (state.currentProject && state.currentPRD) {\n          state.updateProject(state.currentProject.id, {\n            prd: state.currentPRD,\n            status: 'active'\n          });\n        }\n      },\n\n      // UI state\n      activeView: 'projects',\n      setActiveView: (view) => set({ activeView: view }),\n      activeSection: 'overview',\n      setActiveSection: (section) => set({ activeSection: section }),\n      \n      isLoading: false,\n      setIsLoading: (loading) => set({ isLoading: loading })\n    }),\n    {\n      name: 'pmhelper-storage',\n      partialize: (state) => ({\n        projects: state.projects,\n        currentProject: state.currentProject\n      })\n    }\n  )\n);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}